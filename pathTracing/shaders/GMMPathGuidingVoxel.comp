#version 450

//常量
const float PI = 3.1415926535f;
const float a = 50.01f;	//2.01f;	//协差阵的先验样本数
const float b = 1.0f;	//0.0005f;	//协差阵的先验方差
const float v = 1.01f;	//混合权重项的先验样本数
const uint K = 8;	//高斯分布的数量
const float alpha = 0.7f;
const uint m = 5;
const float getPhotonRange = 0.05f;
const uint gmmPerVoxel = 1;

//struct
//现在就一个pos，但是以后需要采样texture时或者别的时候可以再加
struct Vertex {
	vec4 pos;
	vec4 normal;
};

float lightA = 25.0f;
float sqrtLightA = 5.0f;
vec3 lightStrength = vec3(27.0f, 22.0f, 14.0f);

struct AABBBox {
	float leftX;
	float rightX;
	float leftY;
	float rightY;
	float leftZ;
	float rightZ;
};

struct BvhArrayNode {
	int leftNodeIndex;
	int rightNodeIndex;
	AABBBox AABB;
	int meshIndex;
};

struct Material {
	//bxdfPara.x表示roughness，y表示metallic，z表示refractivity，若z = 1表示不考虑折射
	vec4 bxdfPara;
	vec4 kd;
	vec4 ks;
	vec4 ke;
};

struct Mesh {
	Material material;
	ivec2 indexInIndicesArray;
	AABBBox AABB;
};

struct Ray{
	vec3 startPos;
	vec3 direction;
	vec3 normal;	//这个主要是记录上一个着色点的法线
	vec3 radiance;
	float depth;
};

struct GaussianPara {
	vec2 mean;
	float mixWeight;
	mat2 covarianceMatrix;
};

struct Sufficient_Statistic {
	vec2 ss2;	//高斯分布对该样本的贡献比例乘以样本的位置的乘积之和
	float ss1;		//高斯分布对每个样本的贡献比例之和
	mat2 ss3;	//样本的位置向量与其转置的乘积乘以高斯分布对该样本的贡献比例的乘积之和
};

struct Photon {
	vec2 direction;	//将三维方向转为2维方向，同心圆映射
	float weight;	//亮度 = 0.299f * R + 0.587f * G + 0.114f * B
	vec4 direction_3D;
	vec4 normal;
	vec4 hitPos;
	vec4 startPos;
};

struct PhotonTracingResult{
	uint photonNum;
	Photon photons[10];
};

struct GMMPara {
	float r;	//有效半径
	float photonAvgWeight;
	float photonAvgDistance;
	uint photonNum;
	uint lastUse;	//上次被使用是几帧前
	vec4 pos;
	vec4 normal;
	GaussianPara gaussianParas[K];
	Sufficient_Statistic SSs[K];
};

layout(set = 0, binding = 0) uniform LightUniformBufferObject {
	mat4 model;
	mat4 view;
	mat4 proj;
	vec4 lightPos;
	vec4 normal;
	vec4 size;
} lubo;

layout(set = 1, binding = 0) uniform cameraUniformBufferObject {
	mat4 model;
	mat4 view;
	mat4 proj;
	vec4 cameraPos;
	vec4 randomNumber;	//xyz是随机数，而w是帧数
} cubo;

layout(set = 2, binding = 0, std430) readonly buffer BvhArray{
	BvhArrayNode bvhArrayNode[];
};
layout(set = 2, binding = 1, std430) readonly buffer Vertices{
	Vertex vertices[]; 
};
layout(set = 2, binding = 2, std430) readonly buffer Indices{
	uint indices[]; 
};
layout(set = 2, binding = 3, std430) readonly buffer Meshs{
	Mesh meshs[]; 
};

layout(set = 2, binding = 4) uniform sampler2D shadowMap;
layout(set = 2, binding = 5, rgba8) uniform writeonly image2D pathTracingResult;

layout(set = 2, binding = 6) uniform GMMConstant {
	vec4 voxelStartPos;
	ivec4 voxelNum;
	float voxelSize;
	uint photonTracingNum;
} gmmConstant;

layout(set = 2, binding = 7, std430) buffer PhotonTracingResults{
	PhotonTracingResult photonTracingResults[];
};

layout(set = 2, binding = 8, std430) buffer GMMParaBuffer{
	GMMPara gmmParas[];
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

//function

//----------------------------randomNumber-------------------------------------------

uint pcg(inout uint state)
{
    uint prev = state * 747796405u + 2891336453u;
    uint word = ((prev >> ((prev >> 28u) + 4u)) ^ prev) * 277803737u;
    state = prev;
    return (word >> 22u) ^ word;
}

uvec2 pcg2d(uvec2 v)
{
    v = v * 1664525u + 1013904223u;
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v = v ^ (v >> 16u);
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v = v ^ (v >> 16u);
    return v;
}

float rand(inout uint seed)
{
    uint val = pcg(seed);
    return (float(val) * (1.0 / float(0xffffffffu)));
}


//低差异序列
float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

//----------------------------createRay------------------------------------------
//创造起始光线
Ray makeStartRayFromCamera(vec2 texelUV){

	vec4 ndcPos = vec4(texelUV * 2.0f - 1.0f, 0.0f, 1.0f);
	vec4 worldPos = inverse(cubo.proj * cubo.view) * ndcPos;
	Ray ray;
	ray.startPos = cubo.cameraPos.xyz;
	ray.direction = normalize((worldPos.xyz / worldPos.w) - ray.startPos);	//得到的worldPos是近平面的一点
	ray.normal = ray.direction;//normalize(transpose(mat3(cubo.view)) * vec3(0.0f, 0.0f, -1.0f));	//逆矩阵的转置的逆 = 转置 
	ray.depth = 100.0f;	//远平面

	return ray;

}

//创造起始光子
Ray makeStartPhoton(inout uint randomNumberSeed, inout float pdf){

	Ray ray;
	//vec2 randomNumber = Hammersley(uint(rand(randomNumberSeed) * 100), 100) * 0.5f + rand(randomNumberSeed) * 0.5f;
	//ray.startPos = lubo.lightPos.xyz + lubo.size.xyz * vec3(randomNumber.x, rand(randomNumberSeed), randomNumber.y);
	ray.startPos = lubo.lightPos.xyz + lubo.size.xyz * vec3(rand(randomNumberSeed), rand(randomNumberSeed), rand(randomNumberSeed));
	ray.normal = lubo.normal.xyz;

	//cos加权
	randomNumberSeed++;
	vec2 randomNumberH = vec2(rand(randomNumberSeed), rand(randomNumberSeed));
	float phi = 2.0 * PI * randomNumberH.x;
	float cosTheta = randomNumberH.y;	//sqrt(1.0 - randomNumberH.y) 1减后还是均匀分布，开平方后还是均匀分布，所以可以直接用
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	ray.direction = normalize(vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta));

	vec3 tangent;
	if(abs(ray.normal.x) > abs(ray.normal.y))
        tangent = vec3(ray.normal.z, 0, -ray.normal.x);
    else
        tangent = vec3(0, -ray.normal.z, ray.normal.y);
	tangent = normalize(tangent);
    vec3 bitangent = normalize(cross(ray.normal, tangent));
	mat3 TBN = mat3(tangent, bitangent, ray.normal);

	ray.direction = normalize(TBN * ray.direction);
	ray.depth = 100.0f;
	ray.radiance = lightStrength / lightA;

	pdf = cosTheta / PI;

	return ray;

}

//--------------------------------------EnvironmentMapping------------------------------------

vec2 concentricMapping_hemisphere_3DTo2D(vec3 direction){

	float x = max(abs(direction.x), abs(direction.y));
	float y = min(abs(direction.x), abs(direction.y));
	float r = sqrt(1.0f - direction.z);

	float alphia = x == 0.0f ? 0.0f : y / x;
	float phi_2DivPI = (0.00000406531 + 0.636227 * alpha +  
            0.00615523 * alpha * alpha -
            0.247326 * alpha * alpha * alpha +
            0.0881627 * alpha * alpha * alpha * alpha +
            0.0419157 * alpha * alpha * alpha * alpha * alpha -
            0.0251427 * alpha * alpha * alpha * alpha * alpha * alpha);
	
	float u = r;
	float v = 2.0f * phi_2DivPI * u;
	if(abs(direction.x) < abs(direction.y)){
		float temp = u;
		u = v;
		v = temp;
	}

	u *= sign(direction.x);
	v *= sign(direction.y);

	return vec2(u, v) * 0.5f + 0.5f;

}

vec3 concentricMapping_hemisphere_2DTo3D(vec2 direction){
	
	direction = direction * 2.0f - 1.0f;
	float u = max(abs(direction.x), abs(direction.y));
	float v = min(abs(direction.x), abs(direction.y));

	float r = u;
	float phi = PI / 4 * v / u;

	float x = cos(phi) * r * sqrt(2.0f - r * r);
	float y = sin(phi) * r * sqrt(2.0f - r * r);
	float z = 1.0f - r * r;

	if(abs(direction.x) < abs(direction.y)){
		float temp = x;
		x = y;
		y = temp;
	}

	x *= sign(direction.x);
	y *= sign(direction.y);

	return normalize(vec3(x, y ,z));

}

vec2 concentricMapping_sphere_3DTo2D(vec3 direction){

	float x = abs(direction.x);
	float y = abs(direction.y);
	float z = abs(direction.z);

	float alpha = max(x, y) == 0.0f ? 0.0f : min(x, y) / max(x, y);
	float phi_2DivPI = (0.00000406531 + 0.636227 * alpha +  
            0.00615523 * alpha * alpha -
            0.247326 * alpha * alpha * alpha +
            0.0881627 * alpha * alpha * alpha * alpha +
            0.0419157 * alpha * alpha * alpha * alpha * alpha -
            0.0251427 * alpha * alpha * alpha * alpha * alpha * alpha);

	if(x < y){
		phi_2DivPI = 1.0f - phi_2DivPI;
	}

	float r = sqrt(1.0f - z);
	float u = phi_2DivPI * r;
	float v = r - u;

	if(abs(direction.x) < abs(direction.y)){
		float temp = u;
		u = v;
		v = temp;
	}

	if(direction.z < 0.0f){
		float temp = u;
		u = 1.0f - v;
		v = 1.0f - temp;
	}

	u *= sign(direction.x);
	v *= sign(direction.y);

	return vec2(u, v) * 0.5f + 0.5f;

}

vec3 concentricMapping_sphere_2DTo3D(vec2 direction){

	float u = abs(direction.x * 2.0f - 1.0f);
	float v = abs(direction.y * 2.0f - 1.0f);

	float isNorth = 1.0f;
	if(v > 1.0f - u){
		float temp = u;
		u = 1.0f - v;
		v = 1.0f - temp;
		isNorth = -1.0f;
	}

	float xBigger = 1.0f;
	if(v > u){
		float temp = u;
		u = v;
		v = temp;
		xBigger = -1.0f;
	}

	float r = u + v;
	float phi = PI / 4 * ((u - v) / r + 1.0f);

	float x = cos(phi) * r * sqrt(2.0f - r * r);
	float y = sin(phi) * r * sqrt(2.0f - r * r);
	float z = 1.0f - r * r;

	if(xBigger == -1.0f){
		float temp = x;
		x = y;
		y = x;
	}

	x *= sign(direction.x - 0.5f);
	y *= sign(direction.y - 0.5f);
	z *= sign(isNorth);

	return normalize(vec3(x, y ,z));

}

vec2 getThetaAndPhi(vec3 direction){
	
	float x = abs(direction.x);
	float y = abs(direction.y);
	float z = abs(direction.z);

	float theta = acos(z);
	if(direction.z > 0.0f){
		theta = PI / 2.0f - theta;
	}else{
		theta = PI / 2.0f + theta;
	}

	float alpha = max(x, y) == 0.0f ? 0.0f : min(x, y) / max(x, y);
	float phi_2DivPI = (0.00000406531 + 0.636227 * alpha +  
            0.00615523 * alpha * alpha -
            0.247326 * alpha * alpha * alpha +
            0.0881627 * alpha * alpha * alpha * alpha +
            0.0419157 * alpha * alpha * alpha * alpha * alpha -
            0.0251427 * alpha * alpha * alpha * alpha * alpha * alpha);
	if(x < y){
		phi_2DivPI = 1.0f - phi_2DivPI;
	}
	float phi = phi_2DivPI * PI / 2.0f;

	if(direction.x < 0.0f && direction.y >= 0.0f){
		phi = PI - phi;
	}else if(direction.x < 0.0f && direction.y < 0.0f){
		phi = PI + phi;
	}else if(direction.x >= 0.0f && direction.y < 0.0f){
		phi = 2.0f * PI - phi;
	}

	return vec2(theta, phi);

}

vec3 getXYZ(vec2 direction){
	
	float z = 0.0f;
	if(direction.x < PI / 2.0f){
		z = cos(PI / 2.0f - direction.x);
	}else{
		z = -cos(direction.x - PI / 2.0f);
	}
	float sinTheta = sqrt(1.0f - z * z);
	float x = sinTheta * cos(direction.y);
	float y = sinTheta * sin(direction.y);

	return normalize(vec3(x, y, z));

}

void getHitPointNormalAndTBN(uint vertexIndex, inout vec3 normal, inout mat3 TBN){

	//计算面法线
	vec3 P0 = vertices[vertexIndex].pos.xyz;
	vec3 P1 = vertices[vertexIndex + 1].pos.xyz;
	vec3 P2 = vertices[vertexIndex + 2].pos.xyz;
	
	vec3 tangent = normalize(P1 - P0);
	vec3 bitangent = normalize(P2 - P0);
	normal = normalize(cross(tangent, bitangent));
	bitangent = normalize(cross(normal, tangent));
	TBN = mat3(tangent, bitangent, normal);
	
}

//---------------------------------------------EM---------------------------------------
//二元高斯分布
float GaussianPdf(GaussianPara gp, vec2 pos){

	float x = pos.x;
	float y = pos.y;
	float mu1 = gp.mean.x;	//均值
	float mu2 = gp.mean.y;
	float d1 = sqrt(gp.covarianceMatrix[0].x);	//标准差
	float d2 = sqrt(gp.covarianceMatrix[1].y);
	float d3 = gp.covarianceMatrix[0].y;	//协方差
	float rho = d3 / d1 / d2;	//相关系数
	float pdf = 1 / (2.0f * PI * d1 * d2 * sqrt(1.0f - rho * rho)) * exp(-0.5f / (1.0f - rho * rho) * ((x - mu1) * (x - mu1) / d1 / d1 - 2.0f * rho * (x - mu1) / d1 * (y - mu2) / d2 + (y - mu2) * (y - mu2) / d2 / d2));
	
	return clamp(pdf, 0.000001f, 1.0f);

}

void E_Step(inout GMMPara gmmPara, Photon photon, uint photonNum){

	float coff = pow(max(photonNum, 1), -alpha);
	gmmPara.photonAvgWeight = max((1 - coff) * gmmPara.photonAvgWeight + coff * photon.weight, 0.01f);
	float gamma[K];
	float gammaSum = 0.0f;

	for(int i = 0; i < K; i++){
		GaussianPara gp = gmmPara.gaussianParas[i];
		gamma[i] = GaussianPdf(gp, photon.direction);
		gammaSum += gamma[i];
	}

	gammaSum = gammaSum == 0.0f ? 1.0f : gammaSum;

	for(int i = 0; i < K; i++){
		Sufficient_Statistic SS = gmmPara.SSs[i];
		SS.ss1 = (1 - coff) * SS.ss1 + coff * photon.weight * gamma[i] / gammaSum;
		SS.ss2 = (1 - coff) * SS.ss2 + coff * photon.weight * gamma[i] / gammaSum * photon.direction;
		SS.ss3 = (1 - coff) * SS.ss3 + coff * photon.weight * gamma[i] / gammaSum * outerProduct(photon.direction, photon.direction);
		gmmPara.SSs[i] = SS;
	}

}

void M_Step(inout GMMPara gmmPara, uint photonNum){

	for(int i = 0; i < K; i++){
		
		GaussianPara gp;
		Sufficient_Statistic ss = gmmPara.SSs[i];

		gp.mixWeight = (ss.ss1 / gmmPara.photonAvgWeight + float(v - 1) / photonNum) / (1 + K * float(v - 1) / photonNum);
		gp.mean = ss.ss2 / ss.ss1;

		mat2 bE = mat2(vec2(b / photonNum, 0.0f), vec2(0.0f, b / photonNum));
		mat2 A = outerProduct(ss.ss2, gp.mean) + outerProduct(gp.mean, ss.ss2);
		mat2 B = outerProduct(gp.mean, gp.mean);
		gp.covarianceMatrix = (bE + (ss.ss3 - A + ss.ss1 * B) / gmmPara.photonAvgWeight) / ((a - 2) / photonNum + ss.ss1 / gmmPara.photonAvgWeight);

		gmmPara.gaussianParas[i] = gp;

	}

}

void getVaildRadius(inout GMMPara gmmPara){
	
	float vaildRadius = 0.0f;
	for(int i = 0; i < K; i++){

		mat2 covMatrix = gmmPara.gaussianParas[i].covarianceMatrix;
		float lambda = 1.0f / (covMatrix[0].x * 1000.0f * covMatrix[1].y) * max(covMatrix[0].x, covMatrix[1].y) * 1000.0f;	//防止方差过小，超出浮点数精度
		float maxDistance = sqrt(5.0f / lambda);

		vec3 gmmMeanDirection = concentricMapping_hemisphere_2DTo3D(vec2(gmmPara.gaussianParas[i].mean.x, 0.0f));

		vec2 direction_2D = vec2(min(maxDistance + gmmPara.gaussianParas[i].mean.x, 1.0f), 0.0f);
		vec3 direction = concentricMapping_hemisphere_2DTo3D(direction_2D);

		float vaildRadiusK = gmmPara.photonAvgDistance * tan(acos(max(dot(direction, gmmMeanDirection), 0.01f)));
		vaildRadius += 1 / (gmmPara.gaussianParas[i].mixWeight / vaildRadiusK);
	}

	gmmPara.r = vaildRadius;

}

//----------------------------getDirection-------------------------------------------

//需要材质、TBN
vec3 getRayFromBxdf(Material material, mat3 TBN, vec3 i, vec3 normal, float randomNumber, inout float pdf){

	vec2 randomNumberH = Hammersley(uint(randomNumber * 100), 100);

	float roughness =  max(material.bxdfPara.x, 0.1f);	//若粗糙度为0，D将是0/0，且趋近于无穷，除非分子上是a4，但是又会导致不是趋近于0时的值的错误
	float a2 = roughness * roughness * roughness * roughness;
	float phi = 2.0 * PI * randomNumberH.x;
	//若roughness是1，则cosTheta是sqrt(1-randomNumberH.y)，所以完全粗糙的情况下，就是cos加权，且pdf也就是cosTheta / PI
	float cosTheta = sqrt((1.0 - randomNumberH.y) / (1.0 + (a2 - 1.0) * randomNumberH.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

	vec3 h = normalize(vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta));
	h = normalize(TBN * h);

	float d = (a2 - 1) * cosTheta * cosTheta + 1;
	float D = a2 / (PI * d * d);
	pdf = D * cosTheta;	//h的pdf

	vec3 rayDirection = normalize(2.0f * dot(h, i) * h - i);

	if(dot(rayDirection, normal) > 0.0f){
		pdf = pdf / (4 * dot(h, i));	//出射的pdf
	}else{
		rayDirection = h;	//将h当作出射向量
	}

	pdf = clamp(pdf, 0.01f, 1.0f);
	return rayDirection;

}

mat2 Cholesky(mat2 covMatrix){
	mat2 L = mat2(0.0f);
	float l00 = sqrt(covMatrix[0][0]);
	L[0][0] = l00;
	L[0][1] = covMatrix[0][1] / l00;
	float l11 = sqrt(covMatrix[1][1] - L[0][1] * L[0][1]);
	L[1][1] = l11;
	return L;
}

vec2 sample2DGussian(GaussianPara gp, inout uint randomNumberSeed, inout float pdf){

	mat2 covMatrix = gp.covarianceMatrix;
	vec2 mean = gp.mean;

	mat2 L = Cholesky(covMatrix);	//协差阵是正定的

	//Box-Muller变换
	vec2 randomNumber = vec2(rand(randomNumberSeed), rand(randomNumberSeed));
	float X = sqrt(-2.0f * log(randomNumber.x)) * cos(2.0f * PI * randomNumber.y);
	float Y = sqrt(-2.0f * log(randomNumber.x)) * sin(2.0f * PI * randomNumber.y);

	vec2 direction = mean + L * vec2(X, Y);
	pdf = clamp(GaussianPdf(gp, direction), 0.01f, 1.0f);
	return direction;

}

vec3 getRayFromPhotonGuide(vec3 hitPos, mat3 TBN, float randomNumber, uint randomNumberSeed, inout float pdf){

	vec3 normal = TBN[2];

	ivec3 voxelIndexXYZ = ivec3((hitPos - gmmConstant.voxelStartPos.xyz) / gmmConstant.voxelSize);
	uint voxelIndex = voxelIndexXYZ.z * gmmConstant.voxelNum.x * gmmConstant.voxelNum.y + voxelIndexXYZ.y * gmmConstant.voxelNum.x + voxelIndexXYZ.x;

	GMMPara gmmPara = gmmParas[voxelIndex];
	if(gmmPara.photonNum == 0){
		pdf = 0.0f;
		return vec3(0.0f);
	}

	//使用GMM获得采样向量
	float gussian[K];
	float mixWeightSum = 0.0f;
	for(int i = 0; i < K; i++){
		gussian[i] = 0.0f;
		vec3 gussianMean = getXYZ(gmmPara.gaussianParas[i].mean);	//concentricMapping_sphere_2DTo3D(gmmPara.gaussianParas[i].mean);
		float cosTheta = dot(gussianMean, TBN[2]);
		if(cosTheta > 0.0f){
			gussian[i] = cosTheta;
			mixWeightSum += gmmPara.gaussianParas[i].mixWeight * cosTheta;
		}
	}

	float probability = 0.0f;
	for(int i = 0; i < K; i++){
		if(gussian[i] == 0.0f){
			continue;
		}
		probability += gmmPara.gaussianParas[i].mixWeight * gussian[i] / mixWeightSum;
		if(randomNumber < probability){
			vec3 sampelDirection = getXYZ(sample2DGussian(gmmPara.gaussianParas[i], randomNumberSeed, pdf));	//concentricMapping_sphere_2DTo3D(sample2DGussian(gmmPara.gaussianParas[i], randomNumberSeed, pdf));
			//pdf = clamp(pdf * gussian[i], 0.01f, pdf);
			return sampelDirection;
		}
	}

	pdf = 0.0f;
	return vec3(0.0f);

	
}

//-----------------------------------hitTest-----------------------------------------------

//AABB碰撞检测，-1表示没有碰撞到，0表示碰撞到了且不是在场景内部，1表示在场景内部
bool hitAABB(AABBBox AABB, Ray ray){

	//这里并不能检测出是否朝向AABB，反而会导致原本该命中的被剔除了，尤其是有些vertex，其发射方向与AABB中心除以一个夹角，导致只有与夹角小于90度的地方才能命中
	//vec3 AABBCenter = vec3(AABB.leftX + (AABB.rightX - AABB.leftX) / 2, 
	//					   AABB.leftY + (AABB.rightY - AABB.leftY) / 2,
	//					   AABB.leftZ + (AABB.rightZ - AABB.leftZ) / 2);
	////判断ray的方向是否朝向AABB，并且不能射向发射点的AABB
	//if(dot(AABBCenter - ray.startPos, ray.direction) <= 0.0f){
	//	return false;
	//}
	
	//判断光线是不是在场景内部发出的，如果是还不能直接抛弃别的场景
	//虽然会导致每次都与自身发射点的AABB再检测一次hitMesh
	if(ray.startPos.x > AABB.leftX && ray.startPos.x < AABB.rightX && 
	   ray.startPos.y > AABB.leftY && ray.startPos.y < AABB.rightY &&
	   ray.startPos.z > AABB.leftZ && ray.startPos.z < AABB.rightZ){
		return true;
	}

	float maxInTime = 0.0f;
	float minOutTime = 1000000.0f;	//超了再说

	if(ray.direction.x != 0){	//直射与面都不考虑
		float leftX = (AABB.leftX - ray.startPos.x) / ray.direction.x;
		float rightX= (AABB.rightX - ray.startPos.x) / ray.direction.x;
		maxInTime = max(min(leftX, rightX), maxInTime);
		minOutTime = min(max(leftX, rightX), minOutTime);
	}

	if(ray.direction.y != 0){
		float leftY = (AABB.leftY - ray.startPos.y) / ray.direction.y;
		float rightY = (AABB.rightY - ray.startPos.y) / ray.direction.y;
		maxInTime = max(min(leftY, rightY), maxInTime);
		minOutTime = min(max(leftY, rightY), minOutTime);
	}

	if(ray.direction.z != 0){
		float leftZ = (AABB.leftZ - ray.startPos.z) / ray.direction.z;
		float rightZ = (AABB.rightZ - ray.startPos.z) / ray.direction.z;
		maxInTime = max(min(leftZ, rightZ), maxInTime);
		minOutTime = min(max(leftZ, rightZ), minOutTime);
	}

	if(minOutTime < maxInTime){
		return false;
	}

	//直接用包围盒中点算可能会导致前面的mesh的AABB的depth反而比后面的大，导致被剔除
	if(maxInTime > ray.depth){
		return false;	//深度测试不通过
	}

	return true;
	

}

//返回碰撞点的mesh索引、三角形面片的第一个indicis索引，没碰撞到则不动
void hitMesh(inout Ray ray, uint meshIndex, inout ivec2 result){

	Mesh mesh = meshs[meshIndex];

	uint startVertexIndex = mesh.indexInIndicesArray.x;
	uint endVertexIndex = mesh.indexInIndicesArray.y;
	 
	for(uint i = startVertexIndex; i < endVertexIndex; i += 3){
		vec3 P0 = vertices[indices[i]].pos.xyz;
		vec3 P1 = vertices[indices[i + 1]].pos.xyz;
		vec3 P2 = vertices[indices[i + 2]].pos.xyz;

		vec3 tangent = normalize(P1 - P0);
		vec3 bitangent = normalize(P2 - P0);
		vec3 normal = normalize(cross(tangent, bitangent));
		if(dot(normal, -ray.direction) <= 0){
			continue;
		}

		vec3 E1 = P1 - P0;
		vec3 E2 = P2 - P0;
		vec3 S = ray.startPos - P0;
		vec3 S1 = cross(ray.direction, E2);
		vec3 S2 = cross(S, E1);

		vec3 tbb = 1 / dot(S1, E1) * vec3(dot(S2, E2), dot(S1, S), dot(S2, ray.direction));
		if(tbb.x > 0 && (1.0f - tbb.y - tbb.z) > 0 && tbb.y > 0 && tbb.z > 0){	//打到了
			if(tbb.x > ray.depth){
				continue;	//深度测试没通过
			}
			result = ivec2(meshIndex, indices[i]);
			ray.depth = tbb.x;
			return;
		}
	}

}

//由于不能使用递归，我们需要采用栈的方式循环读取
ivec2 hitScene(inout Ray ray){
	
	ivec2 result = ivec2(-1, -1);
	//栈的大小需要和和bvh树节点总数相同（最坏情况），应该从CPU中uniform过来的，但是懒得写了，直接用个大小为10的数组，对于我们这个小场景应该够用了
	//第一个表示sceneIndex，第二个是自身是哪个子树，第三个是父结点是否要去除
	ivec3 sceneStack[15] = ivec3[15](ivec3(0, 1, 1), ivec3(-1), ivec3(-1), ivec3(-1), ivec3(-1), ivec3(-1),
									 ivec3(-1), ivec3(-1), ivec3(-1), ivec3(-1), ivec3(-1), ivec3(-1), ivec3(-1), ivec3(-1), ivec3(-1));
	int stackTop = 0;
	while(stackTop >= 0){

		if(sceneStack[stackTop].z == -1){	
			int isRight = sceneStack[stackTop].y;
			sceneStack[stackTop] = ivec3(-1, -1, -1);
			stackTop -= 1;
			if(isRight == 1){
				sceneStack[stackTop].z = -1;
			}
			continue;
		}

		BvhArrayNode scene = bvhArrayNode[sceneStack[stackTop].x];
		if(!hitAABB(scene.AABB, ray)){
			int isRight = sceneStack[stackTop].y;
			sceneStack[stackTop] = ivec3(-1, -1, -1);
			stackTop -= 1;
			if(isRight == 1){
				sceneStack[stackTop].z = -1;
			}
			continue;
		}

		//若是叶子节点，则直接进行mesh碰撞
		if(scene.leftNodeIndex == -1){
			hitMesh(ray, scene.meshIndex, result);
			int isRight = sceneStack[stackTop].y;
			sceneStack[stackTop] = ivec3(-1, -1, -1);
			stackTop -= 1;
			if(isRight == 1){
				sceneStack[stackTop].z = -1;
			}
			continue;
		}

		//先将左右子树压栈，先遍历左子树再右子树
		stackTop += 1;
		sceneStack[stackTop] = ivec3(scene.rightNodeIndex, 1, 1);
		stackTop += 1;
		sceneStack[stackTop] = ivec3(scene.leftNodeIndex, 0, 1);

	}

	return result;

}

//-------------------------------------------bxdf---------------------------------------------------------

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

//若当前hitPoint是i，那么currentPos是i-1，startPos是i-2，也就是说只有当i >= 2时才计算weight
vec3 getFr(vec3 startPos, vec3 currentPos, vec3 currentNormal, vec3 hitPos, Material material){

	vec3 albedo = material.kd.rgb;
	float roughness = material.bxdfPara.x;
	float metallic = material.bxdfPara.y;
	float refractivity = material.bxdfPara.z;

	float diff_fr = 1 / (2 * PI);

	vec3 F0 = vec3(0.04); 
	F0 = mix(F0, albedo, metallic);

	vec3 i = normalize(hitPos - currentPos);
	vec3 o = normalize(startPos - currentPos);
	vec3 h = normalize(i + o);
	float NDF = DistributionGGX(currentNormal, h, roughness);        
	float G = GeometrySmith(currentNormal, o, i, roughness);      
	vec3 F = fresnelSchlick(max(dot(h, o), 0.0), F0); 

	vec3 nominator = NDF * G * F;
	float denominator = 4.0 * max(dot(currentNormal, o), 0.0) * max(dot(currentNormal, i), 0.0) + 0.001; 
	vec3 spec_fr = nominator / denominator;

	vec3 ks = F;
	vec3 kd = vec3(1.0) - ks;
	kd *= 1.0 - metallic;

	return kd * albedo * diff_fr + spec_fr;

}

//--------------------------------------------PhotonTracingTrain--------------------------------------

void hitTest(vec3 hitPos, vec3 normal){

	Ray ray;
	ray.startPos = cubo.cameraPos.xyz;
	ray.direction = normalize(hitPos - cubo.cameraPos.xyz);
	ray.depth = 100.0f;
	ray.normal = ray.direction;
	ivec2 result = hitScene(ray);
	if(result.x == -1 || abs(ray.depth - length(hitPos - cubo.cameraPos.xyz)) > 0.1f){
		return;
	}

	vec4 clipPos = cubo.proj * cubo.view * vec4(hitPos, 1.0f);
	vec4 ndcPos = clipPos / clipPos.w;
	ivec2 texelUV = ivec2((ndcPos.xy * 0.5f + 0.5f) * (gl_WorkGroupSize * gl_NumWorkGroups).xy);
	imageStore(pathTracingResult, texelUV, vec4(10.0f));
}

void photonTracing(Ray ray, inout uint randomNumberSeed, uint photonTracingIndex){

	vec3 normal;
	mat3 TBN;
	Material material;
	float RR;
	int lossNum = 0;
	int maxLossNum = 50;
	vec3 lastHitPos;
	float startWeight = 0.299f * ray.radiance.x + 0.587f * ray.radiance.g + 0.114f * ray.radiance.b;
	float pdf = 1.0;

	ivec2 result = hitScene(ray);
	while(lossNum < maxLossNum && result.x == -1){
		randomNumberSeed++;
		ray = makeStartPhoton(randomNumberSeed, pdf);
		result = hitScene(ray);
		lossNum++;
	}
	if(lossNum == maxLossNum){
		return;
	}

	int meshIndex = result.x;
	int vertexIndex = result.y;
	vec3 hitPos = ray.startPos + ray.depth * ray.direction;
	getHitPointNormalAndTBN(vertexIndex, normal, TBN);
	material = meshs[meshIndex].material;

	//hitTest(hitPos, normal);
	//return;

	Photon photon;
	photon.hitPos = vec4(hitPos, 0.0f);
	photon.startPos = vec4(ray.startPos, 0.0f);
	photon.direction_3D = vec4(-ray.direction, 0.0f);
	photon.direction = getThetaAndPhi(-ray.direction);	//concentricMapping_sphere_3DTo2D(-ray.direction);
	photon.weight = 10.0f * (0.299f * ray.radiance.x + 0.587f * ray.radiance.g + 0.114f * ray.radiance.b) * dot(ray.normal, ray.direction) * dot(-ray.direction, normal) / pdf;
	photonTracingResults[photonTracingIndex].photons[0] = photon;
	photonTracingResults[photonTracingIndex].photonNum = 1;

	if(material.bxdfPara.x > 0.75f){	//当前是漫反射平面，结束弹射
		return;
	}

	RR = min(photon.weight / startWeight / 0.00001f, 1.0f);
	if(rand(randomNumberSeed) > RR){
		return;
	}

	//获得出射方向
	ray.radiance = ray.radiance * dot(ray.normal, ray.direction) * dot(-ray.direction, normal) / RR;	//需要打到下个顶点时才可以计算bxdf
	lastHitPos = ray.startPos;
	ray.startPos = hitPos;
	ray.direction = getRayFromBxdf(material, TBN, -ray.direction, normal, rand(randomNumberSeed), pdf);
	ray.normal = normal;
	ray.depth = 100.0f;

	int maxIterationNum = 9;	//一共是10
	while(maxIterationNum > 0){
	
		result = hitScene(ray);
		lossNum = 0;
		while(result.x == -1 && lossNum < maxLossNum){
			randomNumberSeed++;
			float randomNumber = 0.8f * (float(lossNum) / float(maxLossNum)) + 0.2f * rand(randomNumberSeed);
			ray.direction = getRayFromBxdf(material, TBN, normalize(lastHitPos - ray.startPos), normal, randomNumber, pdf);
			result = hitScene(ray);
			lossNum++;
		}
		if(lossNum == maxLossNum){
			return;
		}

		int meshIndex = result.x;
		int vertexIndex = result.y;
		vec3 hitPos = ray.startPos + ray.depth * ray.direction;
		getHitPointNormalAndTBN(vertexIndex, normal, TBN);

		//hitTest(hitPos, normal);

		//计算光子强度的衰减fr项
		ray.radiance *= getFr(hitPos, ray.startPos, ray.normal, lastHitPos, material) / pdf;	//现在的材质还是上一个的
		material = meshs[meshIndex].material;

		photon.hitPos = vec4(hitPos, 0.0f);
		photon.startPos = vec4(ray.startPos, 0.0f);
		photon.direction_3D = vec4(-ray.direction, 0.0f);
		photon.direction = getThetaAndPhi(-ray.direction);	// concentricMapping_sphere_3DTo2D(-ray.direction);
		photon.weight = (0.299f * ray.radiance.x + 0.587f * ray.radiance.g + 0.114f * ray.radiance.b) * dot(-ray.direction, normal) / pdf / RR;

		uint photonNum = photonTracingResults[photonTracingIndex].photonNum;
		photonTracingResults[photonTracingIndex].photons[photonNum] = photon;
		photonTracingResults[photonTracingIndex].photonNum = photonNum + 1;

		if(material.bxdfPara.x > 0.75f){	//当前是漫反射平面，结束弹射
			return;
		}

		RR = min(photon.weight / startWeight / 0.00001f, 1.0f);
		if(rand(randomNumberSeed) > RR){
			return;
		}

		//获得出射方向
		ray.radiance = ray.radiance * dot(-ray.direction, normal) / pdf / RR;	//需要打到下个顶点时才可以计算bxdf
		lastHitPos = ray.startPos;
		ray.startPos = hitPos;
		ray.direction = getRayFromBxdf(material, TBN, -ray.direction, normal, rand(randomNumberSeed), pdf);
		ray.normal = normal;
		ray.depth = 100.0f;

		maxIterationNum--;
	
	}

}

//-----------------------------------------------------updateGMM------------------------------------------------

void updateGMM(uint gmmIndex){

	GMMPara gmmPara = gmmParas[gmmIndex];
	//gmmPara.photonNum = max(int(gmmPara.photonNum) - 5, 0);
	//vec2 st[8] = vec2[8](vec2(0.677f, 0.677f), vec2(0.823f, 0.823f), vec2(0.677f, 0.323f), vec2(0.823f, 0.177f), vec2(0.323f, 0.323f), vec2(0.177f, 0.177f), vec2(0.323f, 0.677f), vec2(0.323f, 0.823f));
	if(gmmPara.photonNum == 0){
		for(int i = 0; i < K; i++){

			Sufficient_Statistic SS;
			SS.ss1 = 0.0f;
			SS.ss2 = vec2(0.0f);
			SS.ss3 = mat2(1.0f);
			gmmPara.SSs[i] = SS;

			GaussianPara gp;
			gp.mixWeight = 0.125f;
			gp.mean = vec2(0.5f, 0.5f);		//每个轴（切线空间）一个高斯分布
			gp.covarianceMatrix = mat2(1.0f);
			gmmPara.gaussianParas[i] = gp;

		}
		float voxelIndex_Z = floor(float(gmmIndex) / (gmmConstant.voxelNum.x * gmmConstant.voxelNum.y));
		float voxelIndex_Y = floor((float(gmmIndex) - voxelIndex_Z * (gmmConstant.voxelNum.x * gmmConstant.voxelNum.y)) / gmmConstant.voxelNum.x);
		float voxelIndex_X = float(gmmIndex) -  voxelIndex_Z * (gmmConstant.voxelNum.x * gmmConstant.voxelNum.y) - voxelIndex_Y * gmmConstant.voxelNum.x;
		vec3 voxelIndexXYZ = vec3(voxelIndex_X, voxelIndex_Y, voxelIndex_Z);
		gmmPara.pos.xyz = gmmConstant.voxelStartPos.xyz + gmmConstant.voxelSize * (voxelIndexXYZ + 0.5f);
		gmmPara.photonAvgWeight = 0.0f;
		gmmPara.photonAvgDistance = 0.0f;
		gmmPara.photonNum = 0;
	}else{
		if(gmmPara.photonNum > 100000){
			gmmPara.photonNum = 1000;
		}
	}

	Photon photons_offLine[m];
	int offLine = gmmPara.photonNum == 0 ? 1 : 0;
	for(int i = 0; i < gmmConstant.photonTracingNum; i++){
		PhotonTracingResult result = photonTracingResults[i];
		for(int j = 0; j < result.photonNum; j++){

			Photon photon = result.photons[j];

			float distance = length(photon.hitPos.xyz - gmmPara.pos.xyz);
			if(distance > gmmConstant.voxelSize){		//我们认为在一个体素内(根号三，虽然可能超出体素，但也没事）的光子可以用于训练0.866f
				continue;
			}

			//photon.direction = concentricMapping_hemisphere_3DTo2D(photon.direction_3D.xyz);
			gmmPara.photonAvgDistance = (gmmPara.photonAvgDistance * gmmPara.photonNum + length(photon.startPos.xyz - gmmPara.pos.xyz)) / (gmmPara.photonNum + 1);
			if(offLine == 1){
				photons_offLine[gmmPara.photonNum] = photon;
			}
			gmmPara.photonNum++;	//这里可能会出现超出uint范围的可能

			E_Step(gmmPara, photon, gmmPara.photonNum);
			if(gmmPara.photonNum % m == 0){
				M_Step(gmmPara, gmmPara.photonNum);
				if(offLine == 1){
					for(int k = 0; k < 9; k++){
						for(int u = 0; u < m; u++){
							gmmPara.photonNum++;
							E_Step(gmmPara, photons_offLine[u], m);
						}
						M_Step(gmmPara, m);
					}
					offLine = 0;
				}
			}

		}
	}

	//如果周围有光子，但是不到m个
	uint photonNum = gmmPara.photonNum;
	if(gmmPara.photonNum > 0 && gmmPara.photonNum < m){
		M_Step(gmmPara, gmmPara.photonNum);
		for(int k = 0; k < 3; k++){
			for(int u = 0; u < photonNum; u++){
				gmmPara.photonNum++;
				E_Step(gmmPara, photons_offLine[u], min(gmmPara.photonNum, m));
			}
			M_Step(gmmPara, m);
		}
	}
	//gmmPara.photonNum = gmmPara.photonNum < m ? 0 : gmmPara.photonNum;

	gmmParas[gmmIndex] = gmmPara;

}

//---------------------------------------------getRadiance--------------------------------------------

float getShadow(vec3 worldPos, vec3 lightPos){

	
	vec4 clipPos = lubo.proj * lubo.view * lubo.model * vec4(worldPos, 1.0f);
	vec3 ndcPos = clipPos.xyz / clipPos.w;
	vec2 uv = (ndcPos.xy * 0.5f + 0.5f);

	float depth = texture(shadowMap, uv).x;
	if(ndcPos.z + 0.001f < depth){
		return 1.0f;
	}
	return 0.0f;

	/*
	Ray ray;
	ray.startPos = worldPos;
	ray.direction = normalize(lightPos - worldPos);
	ray.depth = 100.0f;
	
	hitScene(ray);
	return abs(ray.depth - length(lightPos - worldPos)) < 0.05f ? 1.0f : 0.0f;
	*/

}

vec3 getRadianceFromLight(vec3 startPos, vec3 hitPos, vec3 normal, Material material){

	vec3 radiance = vec3(0.0f);

	vec3 lightPos = lubo.lightPos.xyz;
	vec3 lightNormal = normalize(lubo.normal.xyz);
	vec4 lightSize = lubo.size;

	float pdf = 1 / float(lightA);
	vec3 o = normalize(startPos - hitPos);
	vec3 Li = lightStrength / float(lightA);
	float diff_fr = 1 / (2 * PI);

	vec3 albedo = material.kd.rgb;
	float roughness = material.bxdfPara.x;
	float metallic = material.bxdfPara.y;
	float refractivity = material.bxdfPara.z;

	vec3 F0 = vec3(0.04); 
	F0 = mix(F0, albedo, metallic);

	//将面光源分为kxk的小点光源
	for(int i = 1; i < sqrtLightA * 2; i += 2){
		vec3 lightPointPos = lightPos + vec3(lightSize.x, 0.0f, 0.0f) * i / (sqrtLightA * 2);
		for(int j = 1; j < sqrtLightA * 2; j += 2){

			lightPointPos = lightPos + vec3(0.0f, 0.0f, lightSize.z) * j / (sqrtLightA * 2);
			
			vec3 i = normalize(lightPointPos - hitPos);
			vec2 cosTheta = vec2(max(dot(-i, lightNormal), 0.0f), max(dot(i, normal), 0.0f));
			float distance = max(length(lightPointPos - hitPos), 1.0f);

			float other = cosTheta.x * cosTheta.y / (distance * distance);

			vec3 h = normalize(i + o);
			float NDF = DistributionGGX(normal, h, roughness);        
			float G = GeometrySmith(normal, o, i, roughness);      
			vec3 F = fresnelSchlick(max(dot(h, o), 0.0), F0); 

			vec3 nominator = NDF * G * F;
			float denominator = 4.0 * max(dot(normal, o), 0.0) * max(dot(normal, i), 0.0) + 0.001; 
			vec3 spec_fr = nominator / denominator;

			vec3 ks = F;
			vec3 kd = vec3(1.0) - ks;
			kd *= 1.0 - metallic;  

			radiance += (kd * albedo * diff_fr + ks * spec_fr) * Li * other / pdf * getShadow(hitPos, lightPointPos);

		}
	}

	return radiance / float(lightA);

}

//计算撞击点的自发光
vec3 getRadianceFromHitPoint(Material material, vec3 startPos, vec3 hitPos, vec3 hitNormal) {
	
	if(material.ke.rgb != vec3(0.0f)){
		float cosTheta = dot(normalize(hitPos - startPos), hitNormal);
		return material.ke.rgb / float(lightA) *  abs(cosTheta);	//场景就一个光源有自发光，所以写死
	}
	return vec3(0.0f);
}

//---------------------------------------------pathTracing---------------------------------------------
vec3 pathTracing(Ray ray, uint randomNumberSeed, int type, inout float pdfSum){

	vec3 radiance = vec3(0.0f);
	vec3 normal;
	mat3 TBN = mat3(1.0f);
	vec3 hitPos = vec3(1.0f);
	Material material;
	float pdf = 1.0f;
	float bxdfPdf = 1.0f;
	float photonGuidePdf = 1.0f;
	vec3 weight = vec3(1.0f);
	float RR = 0.8f;	//轮盘赌概率

	ivec2 result = hitScene(ray);
	if(result.x == -1){
		return vec3(0.0f);
	}

	int meshIndex = result.x;
	int vertexIndex = result.y;
	hitPos = ray.startPos + ray.depth * ray.direction;
	getHitPointNormalAndTBN(vertexIndex, normal, TBN);	//计算面法线
	material = meshs[meshIndex].material;

	vec3 lightRadiance = vec3(0.0f);	//getRadianceFromLight(ray.startPos, hitPos, normal, material);	//发过来的radiance
	vec3 hitPointEmission = getRadianceFromHitPoint(material, ray.startPos, hitPos, normal);
	vec3 irradiance = lightRadiance + hitPointEmission;
	radiance += irradiance;		//weight = 1

	float randomNumber = rand(randomNumberSeed);
	randomNumber = smoothstep(0.0f, 1.0f, randomNumber);

	if(randomNumber > RR){
		return radiance;
	}

	//vec3 bxdfDirection = getRayFromBxdf(material, TBN, -ray.direction, normal, randomNumber, bxdfPdf);
	//vec3 photonGuideDirection = getRayFromPhotonGuide(hitPos, TBN, randomNumber, randomNumberSeed, photonGuidePdf);
	//float pdfSum = bxdfPdf * bxdfPdf + photonGuidePdf * photonGuidePdf;
	//float bxdfPdfTemp = bxdfPdf * bxdfPdf / pdfSum;
	//if(rand(randomNumberSeed) < bxdfPdfTemp){
	//	ray.direction = bxdfDirection;
	//	pdf = bxdfPdf;
	//}else{
	//	ray.direction = photonGuideDirection;
	//	pdf = photonGuidePdf;
	//}

	if(type == 0){
		ray.direction = getRayFromBxdf(material, TBN, -ray.direction, normal, randomNumber, bxdfPdf);
		pdf = bxdfPdf;
	}else{
		ray.direction = getRayFromPhotonGuide(hitPos, TBN, randomNumber, randomNumberSeed, photonGuidePdf);
		pdf = photonGuidePdf;
	}

	vec3 lastHitPos = ray.startPos;
	ray.startPos = hitPos + 0.01f * ray.direction;	//加一点bias，其实没啥用，但是心里感觉有用，加上吧，心里踏实
	ray.normal = normal;
	ray.depth = 100.0f;

	int lossNum = 0;
	int lossNumMax = 3;
	int maxShootNum = 1;
	while(maxShootNum > 0){
		
		lossNum = 0;
		ivec2 result = hitScene(ray);
		while(lossNum <= lossNumMax && result.x == -1){

			randomNumberSeed += lossNum * 100;
			float randomNumber = 0.8f * (float(lossNum) / float(lossNumMax)) + 0.2f * rand(randomNumberSeed);

			if(type == 0){
				ray.direction = getRayFromBxdf(material, TBN, -ray.direction, normal, randomNumber, bxdfPdf);
				pdf = bxdfPdf;
			}else{
				ray.direction = getRayFromPhotonGuide(hitPos, TBN, randomNumber, randomNumberSeed, photonGuidePdf);
				pdf = photonGuidePdf;
			}

			ray.depth = 100.0f;

			lossNum++;
			result = hitScene(ray);

		}
		if(lossNum - 1 == lossNumMax){
			return radiance;
		}
		//return vec3(0.0f);
		pdfSum *= pdf;

		int meshIndex = result.x;
		int vertexIndex = result.y;
		hitPos = ray.startPos + ray.depth * ray.direction;
		getHitPointNormalAndTBN(vertexIndex, normal, TBN);		//计算面法线
		material = meshs[meshIndex].material;

		vec3 lightRadiance = getRadianceFromLight(ray.startPos, hitPos, normal, material);	//发过来的radiance
		vec3 hitPointEmission = getRadianceFromHitPoint(material, ray.startPos, hitPos, normal);
		vec3 irradiance = lightRadiance + hitPointEmission;
		weight *= getFr(lastHitPos, ray.startPos, ray.normal, hitPos, material) * max(dot(ray.direction, ray.normal), 0.0f) / pdf / RR;
		radiance += irradiance * weight;

		randomNumberSeed++;
		float randomNumber = rand(randomNumberSeed);
		randomNumber = smoothstep(0.0f, 1.0f, randomNumber);

		if(randomNumber > RR){
			return radiance;
		}

		//bxdfDirection = getRayFromBxdf(material, TBN, -ray.direction, normal, randomNumber, bxdfPdf);
		//photonGuideDirection = getRayFromPhotonGuide(hitPos, TBN, randomNumber, randomNumberSeed, photonGuidePdf);
		//
		//pdfSum = bxdfPdf * bxdfPdf + photonGuidePdf * photonGuidePdf;
		//bxdfPdfTemp = bxdfPdf * bxdfPdf / pdfSum;
		//if(rand(randomNumberSeed) < bxdfPdfTemp){
		//	ray.direction = bxdfDirection;
		//	pdf = bxdfPdf;
		//}else{
		//	ray.direction = photonGuideDirection;
		//	pdf = photonGuidePdf;		
		//}

		if(type == 0){
			ray.direction = getRayFromBxdf(material, TBN, -ray.direction, normal, randomNumber, bxdfPdf);
			pdf = bxdfPdf;
		}else{
			ray.direction = getRayFromPhotonGuide(hitPos, TBN, randomNumber, randomNumberSeed, photonGuidePdf);
			pdf = photonGuidePdf;
		}

		lastHitPos = ray.startPos;
		ray.startPos = hitPos;
		ray.normal = normal;
		ray.depth = 100.0f;

		maxShootNum--;

	}

	return radiance;

}


//------------------------------------------------------------------------------------------------------
void main(){

	//vec2 st = getThetaAndPhi(normalize(vec3(-1.0f, -1.0f, 1.0f)));
	//vec3 result = 5 % (8 / 2) == 1 ? vec3(1.0f) : vec3(0.0f);
	//imageStore(pathTracingResult, ivec2(gl_GlobalInvocationID.xy), vec4(result, 1.0f));
	//return;

	uvec2 seed2 = pcg2d(ivec2(gl_GlobalInvocationID) * (uint(cubo.randomNumber.w + cubo.randomNumber.x) + 1));
	uint seed = seed2.x + seed2.y;
	Ray ray;

	//比如每帧发射128个光子，那么对于一个8*8的线程组，我们只需要两个线程组就可以完成了
	uint workGroupSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
	uint workGroupIndex = gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y + gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
	//不能直接用gl_GlobalInvocationID，因为我要尽量让一个worlGroup进行工作，现在相当于按组排序
	uint threadIndex = workGroupIndex * workGroupSize + uint(gl_LocalInvocationIndex);
	
	if(threadIndex < gmmConstant.photonTracingNum){
		float pdf;
		ray = makeStartPhoton(seed, pdf);
		photonTracingResults[threadIndex].photonNum = 0;		//每帧初始化
		photonTracing(ray, seed, threadIndex);
	}
	//return;
	memoryBarrierBuffer();	//要等待所有光子弹射完才能进行下一步
	
	//对已有的GMM进行更新，每个GPU线程对应一个体素（每个体素有若干个GMM）
	uint voxelNum = gmmConstant.voxelNum.x * gmmConstant.voxelNum.y * gmmConstant.voxelNum.z;
	uint threadNumSum = workGroupSize * gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_NumWorkGroups.z;	//所有开辟的线程数
	//规定，i表示体素索引，当体素数量小于线程数时，gl_GlobalInvocationID表示体素索引；反之，可能有些线程需要处理两次
	for(uint i = threadIndex; i < voxelNum * gmmPerVoxel; i += threadNumSum){
		updateGMM(i);
	}
	memoryBarrierBuffer();

	vec3 radiance = vec3(0.0f);
	vec2 texelSize = 1.0f / (gl_WorkGroupSize * gl_NumWorkGroups).xy;
	int sppNum = 1;
	for(int i = 0; i < sppNum; i++){

		vec2 texelUV = (vec2(gl_GlobalInvocationID.xy) + vec2(rand(seed), rand(seed))) * texelSize;
		ray = makeStartRayFromCamera(texelUV);
		seed += i;

		float pdfBxDF = 1.0f;
		vec3 bxdfRadiance = pathTracing(ray, seed, 0, pdfBxDF);
		float pdfPhotonGuiding = 1.0f;
		vec3 photonGuidingRadiance = pathTracing(ray, seed, 1, pdfPhotonGuiding);

		float pdfSum = pdfBxDF * pdfBxDF + pdfPhotonGuiding * pdfPhotonGuiding;
		radiance += photonGuidingRadiance;	//bxdfRadiance * (pdfBxDF * pdfBxDF / pdfSum) + photonGuidingRadiance * (pdfPhotonGuiding * pdfPhotonGuiding / pdfSum);

	}

	radiance /= sppNum;
	imageStore(pathTracingResult, ivec2(gl_GlobalInvocationID.xy), vec4(radiance, 1.0f));

}
