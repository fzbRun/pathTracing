#version 450

//常量
float PI = 3.1415926535f;

//struct
//现在就一个pos，但是以后需要采样texture时或者别的时候可以再加
struct Vertex {
	vec4 pos;
	vec4 normal;
};

float lightA;
vec3 lightStrength = vec3(27.0f, 22.0f, 14.0f);

struct AABBBox {
	float leftX;
	float rightX;
	float leftY;
	float rightY;
	float leftZ;
	float rightZ;
};

struct BvhArrayNode {
	int leftNodeIndex;
	int rightNodeIndex;
	AABBBox AABB;
	int meshIndex;
};

struct Material {
	//bxdfPara.x表示roughness，y表示metallic，z表示refractivity，若z = 1表示不考虑折射
	vec4 bxdfPara;
	vec4 kd;
	vec4 ks;
	vec4 ke;
};

struct Mesh {
	Material material;
	ivec2 indexInIndicesArray;
	AABBBox AABB;
};

struct Ray{
	vec3 startPos;
	vec3 direction;
	vec3 normal;	//这个主要是记录上一个着色点的法线
	vec3 radiance;
	float depth;
};

layout(set = 0, binding = 0) uniform LightUniformBufferObject {
	mat4 model;
	mat4 view;
	mat4 proj;
	vec4 lightPos_strength;
	vec4 normal;
	vec4 size;
} lubo;

layout(set = 1, binding = 0) uniform cameraUniformBufferObject {
	mat4 model;
	mat4 view;
	mat4 proj;
	vec4 cameraPos;
	vec4 randomNumber;	//xyz是随机数，而w是帧数
} cubo;

layout(set = 2, binding = 0, std430) readonly buffer BvhArray{
	BvhArrayNode bvhArrayNode[];
};
layout(set = 2, binding = 1, std430) readonly buffer Vertices{
	Vertex vertices[]; 
};
layout(set = 2, binding = 2, std430) readonly buffer Indices{
	uint indices[]; 
};
layout(set = 2, binding = 3, std430) readonly buffer Meshs{
	Mesh meshs[]; 
};

layout(set = 2, binding = 4) uniform sampler2D shadowMap;
layout(set = 2, binding = 5, rgba8) uniform writeonly image2D pathTracingResult;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

//function

//----------------------------randomNumber-------------------------------------------

uint pcg(inout uint state)
{
    uint prev = state * 747796405u + 2891336453u;
    uint word = ((prev >> ((prev >> 28u) + 4u)) ^ prev) * 277803737u;
    state = prev;
    return (word >> 22u) ^ word;
}

uvec2 pcg2d(uvec2 v)
{
    v = v * 1664525u + 1013904223u;
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v = v ^ (v >> 16u);
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v = v ^ (v >> 16u);
    return v;
}

float rand(inout uint seed)
{
    uint val = pcg(seed);
    return (float(val) * (1.0 / float(0xffffffffu)));
}


//低差异序列
float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

//----------------------------createRay-------------------------------------------
//创造射线
Ray makeStartRayFromCamera(vec2 texelUV){

	vec4 ndcPos = vec4(texelUV * 2.0f - 1.0f, 0.0f, 1.0f);
	vec4 worldPos = inverse(cubo.proj * cubo.view) * ndcPos;
	Ray ray;
	ray.startPos = cubo.cameraPos.xyz;
	ray.direction = normalize((worldPos.xyz / worldPos.w) - ray.startPos);	//得到的worldPos是近平面的一点
	ray.normal = ray.direction;//normalize(transpose(mat3(cubo.view)) * vec3(0.0f, 0.0f, -1.0f));	//逆矩阵的转置的逆 = 转置 
	ray.depth = 100.0f;	//远平面

	return ray;

}

//光源的子路径的第一个点，即光源，需要被记录
Ray makeStartRayFromLight(inout uint randomNumberSeed, inout float pdf){

	Ray ray;
	vec3 randomNumber = vec3(rand(randomNumberSeed), rand(randomNumberSeed), rand(randomNumberSeed)) * 2.0f - 1.0f;
	ray.startPos = lubo.lightPos_strength.xyz + randomNumber * lubo.size.xyz;
	ray.normal = lubo.normal.xyz;

	vec2 randomNumberH = Hammersley(uint(rand(randomNumberSeed) * 100), 100);
	float phi = 2.0 * PI * randomNumberH.x;
	float cosTheta = sqrt(1.0 - randomNumberH.y);
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	ray.direction = normalize(vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta));

	vec3 tangent;
	if(abs(ray.normal.x) > abs(ray.normal.y))
        tangent = vec3(ray.normal.z, 0, -ray.normal.x);
    else
        tangent = vec3(0, -ray.normal.z, ray.normal.y);
	tangent = normalize(tangent);
    vec3 bitangent = cross(ray.normal, tangent);
	mat3 TBN = mat3(tangent, bitangent, ray.normal);

	ray.direction = normalize(TBN * ray.direction);
	ray.depth = 100.0f;
	ray.radiance = lightStrength / lightA;

	pdf =  clamp(cosTheta / PI, 0.01f, 1.0f);

	return ray;

}

//----------------------------getDirection-------------------------------------------

//需要材质、TBN
vec4 getRayReflectDirection(Material material, mat3 TBN, vec3 i, vec3 normal, float randomNumber){

	vec2 randomNumberH = Hammersley(uint(randomNumber * 100), 100);

	float roughness =  max(material.bxdfPara.x, 0.1f);	//若粗糙度为0，D将是0/0，且趋近于无穷，除非分子上是a4，但是又会导致不是趋近于0时的值的错误
	float a2 = roughness * roughness * roughness * roughness;
	float phi = 2.0 * PI * randomNumberH.x;
	//若roughness是1，则cosTheta是sqrt(1-randomNumberH.y)，所以完全粗糙的情况下，就是cos加权，且pdf也就是cosTheta / PI
	float cosTheta = sqrt((1.0 - randomNumberH.y) / (1.0 + (a2 - 1.0) * randomNumberH.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

	vec3 h = normalize(vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta));
	h = normalize(TBN * h);

	float d = (a2 - 1) * cosTheta * cosTheta + 1;
	float D = a2 / (PI * d * d);
	float pdf = D * cosTheta;	//h的pdf

	vec3 rayDirection = normalize(2.0f * dot(h, i) * h - i);

	if(dot(rayDirection, normal) > 0.0f){
		pdf = pdf / (4 * dot(h, i));	//出射的pdf
	}else{
		rayDirection = h;	//将h当作出射向量
	}

	return vec4(rayDirection, clamp(pdf, 0.01f, 1.0f));


}

//不考虑同时发射折射与反射，并且这里不考虑毛玻璃等粗糙折射的情况，只考虑单根折射光线
vec4 getRayRefractDirection(Material Material, vec3 normal, vec3 i, float startRefactivity, float hitRefactivity){

	float cosTheta1 = dot(normal, -i);
	float sinTheta2 = sqrt(1 - cosTheta1 * cosTheta1) * startRefactivity / hitRefactivity;	//n1 * sinTheta1 = n2 * sinTheta2 斯涅尔定理，其中n为反射率
	float cosTheta2 = sqrt(1 - sinTheta2 * sinTheta2);
	//就是入射向量投影到法线，得到入射光 - 法线的单位向量，然后让这个单位向量乘以在折射向量与法线之间的距离，然后让投影法线与之相加，再取负
	vec3 rayDirection =  cosTheta1 * normal + normalize(-i - cosTheta1 * normal) * (cosTheta1 / cosTheta2 * sinTheta2);
	return vec4(-rayDirection, 1.0f);
	
}


//-----------------------------------hitTest-----------------------------------------------

//AABB碰撞检测，-1表示没有碰撞到，0表示碰撞到了且不是在场景内部，1表示在场景内部
bool hitAABB(AABBBox AABB, Ray ray){

	//这里并不能检测出是否朝向AABB，反而会导致原本该命中的被剔除了，尤其是有些vertex，其发射方向与AABB中心除以一个夹角，导致只有与夹角小于90度的地方才能命中
	//vec3 AABBCenter = vec3(AABB.leftX + (AABB.rightX - AABB.leftX) / 2, 
	//					   AABB.leftY + (AABB.rightY - AABB.leftY) / 2,
	//					   AABB.leftZ + (AABB.rightZ - AABB.leftZ) / 2);
	////判断ray的方向是否朝向AABB，并且不能射向发射点的AABB
	//if(dot(AABBCenter - ray.startPos, ray.direction) <= 0.0f){
	//	return false;
	//}
	
	//判断光线是不是在场景内部发出的，如果是还不能直接抛弃别的场景
	//虽然会导致每次都与自身发射点的AABB再检测一次hitMesh
	if(ray.startPos.x > AABB.leftX && ray.startPos.x < AABB.rightX && 
	   ray.startPos.y > AABB.leftY && ray.startPos.y < AABB.rightY &&
	   ray.startPos.z > AABB.leftZ && ray.startPos.z < AABB.rightZ){
		return true;
	}

	float maxInTime = 0.0f;
	float minOutTime = 1000000.0f;	//超了再说

	if(ray.direction.x != 0){	//直射与面都不考虑
		float leftX = (AABB.leftX - ray.startPos.x) / ray.direction.x;
		float rightX= (AABB.rightX - ray.startPos.x) / ray.direction.x;
		maxInTime = max(min(leftX, rightX), maxInTime);
		minOutTime = min(max(leftX, rightX), minOutTime);
	}

	if(ray.direction.y != 0){
		float leftY = (AABB.leftY - ray.startPos.y) / ray.direction.y;
		float rightY = (AABB.rightY - ray.startPos.y) / ray.direction.y;
		maxInTime = max(min(leftY, rightY), maxInTime);
		minOutTime = min(max(leftY, rightY), minOutTime);
	}

	if(ray.direction.z != 0){
		float leftZ = (AABB.leftZ - ray.startPos.z) / ray.direction.z;
		float rightZ = (AABB.rightZ - ray.startPos.z) / ray.direction.z;
		maxInTime = max(min(leftZ, rightZ), maxInTime);
		minOutTime = min(max(leftZ, rightZ), minOutTime);
	}

	if(minOutTime < maxInTime){
		return false;
	}

	//直接用包围盒中点算可能会导致前面的mesh的AABB的depth反而比后面的大，导致被剔除
	if(maxInTime > ray.depth){
		return false;	//深度测试不通过
	}

	return true;
	

}

//返回碰撞点的mesh索引、三角形面片的第一个indicis索引，没碰撞到则不动
void hitMesh(inout Ray ray, uint meshIndex, inout ivec2 result, float backCull){

	Mesh mesh = meshs[meshIndex];
	//因为我们的叶子场景只有一个mesh，所以能hitMesh检测说明一定能hitAABB
	//if(!hitAABB(mesh.AABB, ray)){
	//	return;
	//}

	uint startVertexIndex = mesh.indexInIndicesArray.x;
	uint endVertexIndex = mesh.indexInIndicesArray.y;
	 
	for(uint i = startVertexIndex; i < endVertexIndex; i += 3){
		vec3 P0 = vertices[indices[i]].pos.xyz;
		vec3 P1 = vertices[indices[i + 1]].pos.xyz;
		vec3 P2 = vertices[indices[i + 2]].pos.xyz;

		vec3 tangent = normalize(P1 - P0);
		vec3 bitangent = normalize(P2 - P0);
		vec3 normal = normalize(cross(tangent, bitangent));
		if(backCull == 1.0f && dot(normal, -ray.direction) < 0){
			continue;	//不折射则背面剔除
		}

		vec3 E1 = P1 - P0;
		vec3 E2 = P2 - P0;
		vec3 S = ray.startPos - P0;
		vec3 S1 = cross(ray.direction, E2);
		vec3 S2 = cross(S, E1);

		vec3 tbb = 1 / dot(S1, E1) * vec3(dot(S2, E2), dot(S1, S), dot(S2, ray.direction));
		if(tbb.x > 0 && (1.0f - tbb.y - tbb.z) > 0 && tbb.y > 0 && tbb.z > 0){	//打到了
			if(tbb.x > ray.depth){
				continue;	//深度测试没通过
			}
			result = ivec2(meshIndex, indices[i]);
			ray.depth = tbb.x;
			return;
		}
	}

}

//由于不能使用递归，我们需要采用栈的方式循环读取
ivec2 hitScene(inout Ray ray, float backCull){
	
	ivec2 result = ivec2(-1, -1);
	//栈的大小需要和和bvh树节点总数相同（最坏情况），应该从CPU中uniform过来的，但是懒得写了，直接用个大小为10的数组，对于我们这个小场景应该够用了
	//第一个表示sceneIndex，第二个是自身是哪个子树，第三个是父结点是否要去除
	ivec3 sceneStack[15] = ivec3[15](ivec3(0, 1, 1), ivec3(-1, -1, -1), ivec3(-1, -1, -1), ivec3(-1, -1, -1), ivec3(-1, -1, -1), ivec3(-1, -1, -1),
									 ivec3(-1, -1, -1), ivec3(-1, -1, -1), ivec3(-1, -1, -1), ivec3(-1, -1, -1), ivec3(-1, -1, -1), ivec3(-1, -1, -1),
									 ivec3(-1, -1, -1), ivec3(-1, -1, -1), ivec3(-1, -1, -1));
	int stackTop = 0;
	while(stackTop >= 0){

		if(sceneStack[stackTop].z == -1){	
			int isRight = sceneStack[stackTop].y;
			sceneStack[stackTop] = ivec3(-1, -1, -1);
			stackTop -= 1;
			if(isRight == 1){
				sceneStack[stackTop].z = -1;
			}
			continue;
		}

		BvhArrayNode scene = bvhArrayNode[sceneStack[stackTop].x];
		if(!hitAABB(scene.AABB, ray)){
			int isRight = sceneStack[stackTop].y;
			sceneStack[stackTop] = ivec3(-1, -1, -1);
			stackTop -= 1;
			if(isRight == 1){
				sceneStack[stackTop].z = -1;
			}
			continue;
		}

		//若是叶子节点，则直接进行mesh碰撞
		if(scene.leftNodeIndex == -1){
			hitMesh(ray, scene.meshIndex, result, backCull);
			int isRight = sceneStack[stackTop].y;
			sceneStack[stackTop] = ivec3(-1, -1, -1);
			stackTop -= 1;
			if(isRight == 1){
				sceneStack[stackTop].z = -1;
			}
			continue;
		}

		//先将左右子树压栈，先遍历左子树再右子树
		stackTop += 1;
		sceneStack[stackTop] = ivec3(scene.rightNodeIndex, 1, 1);
		stackTop += 1;
		sceneStack[stackTop] = ivec3(scene.leftNodeIndex, 0, 1);

	}

	return result;

}

//-------------------------------------------bxdf---------------------------------------------------------

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

//-------------------------------------------radiance---------------------------------------------------------

//若当前hitPoint是i，那么currentPos是i-1，startPos是i-2，也就是说只有当i >= 2时才计算weight
vec3 getFr(vec3 startPos, vec3 currentPos, vec3 currentNormal, vec3 hitPos, Material material){

	vec3 albedo = material.kd.rgb;
	float roughness = max(material.bxdfPara.x, 0.1f);
	float metallic = material.bxdfPara.y;
	float refractivity = material.bxdfPara.z;

	float diff_fr = 1 / (2 * PI);

	vec3 F0 = vec3(0.04); 
	F0 = mix(F0, albedo, metallic);

	vec3 i = normalize(hitPos - currentPos);

	vec3 o = normalize(startPos - currentPos);

	//float cosTheta = max(dot(i, currentNormal), 0.0f);

	vec3 h = normalize(i + o);
	float NDF = DistributionGGX(currentNormal, h, roughness);        
	float G = GeometrySmith(currentNormal, o, i, roughness);      
	vec3 F = fresnelSchlick(max(dot(h, o), 0.0), F0); 

	vec3 nominator = NDF * G * F;
	float denominator = 4.0 * max(dot(currentNormal, o), 0.0) * max(dot(currentNormal, i), 0.0) + 0.001; 
	vec3 spec_fr = nominator / denominator;

	vec3 ks = F;
	vec3 kd = vec3(1.0) - ks;
	kd *= (1.0 - metallic) * material.bxdfPara.x;

	return kd * albedo * diff_fr + spec_fr;

}

//计算撞击点的自发光
vec3 getRadianceFromHitPoint(Material material) {
	
	if(material.ke.rgb != vec3(0.0f)){
		return material.ke.rgb / lightA;	//场景就一个光源有自发光，所以写死
	}
	return vec3(0.0f);
}

//---------------------------------------------pathTracing---------------------------------------------

void getHitPointNormalAndTBN(int vertexIndex, inout vec3 normal, vec3 i, inout mat3 TBN){

	//计算面法线
	vec3 P0 = vertices[vertexIndex].pos.xyz;
	vec3 P1 = vertices[vertexIndex + 1].pos.xyz;
	vec3 P2 = vertices[vertexIndex + 2].pos.xyz;
	
	vec3 tangent = normalize(P1 - P0);
	vec3 bitangent = normalize(P2 - P0);
	normal = normalize(cross(tangent, bitangent));
	bitangent = normalize(cross(normal, tangent));
	TBN = mat3(tangent, bitangent, normal);

	//大错特错！！！！！！！！
	//tangent = normal;
	//vec3 sampleNormal = normalize(reflect(i, normal));	//i已经是指向顶点的了，即ray.direction
	//bitangent = normalize(cross(sampleNormal, tangent));
	//tangent = normalize(cross(bitangent, sampleNormal));
	//TBN = mat3(tangent, bitangent, sampleNormal);

	//i = -i;
	//vec3 up = abs(i.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
	//tangent = normalize(cross(up, i));
	//bitangent = cross(i, tangent);
	//TBN = mat3(tangent, bitangent, i);
	
}

//首先，需要明确的是，MISWeight算的是出射的pdf，而weight算的是fr*g
//需要注意的是，在原文中无论是光源子路径还是相机子路径，0表示没有固定的顶点，即考另一个路径浪射，所以pdf也没有意义，设为1
//但是我感觉没什么意义啊，99%都射不到，我直接将原本的1当作0好了，也就是从1开始
int s = 4;
float sMISWeight[4] = float[4](1.0f, 1.0f, 1.0f, 1.0f);	//存的是前面顶点的出射pdf之积
vec3 sRadiance[4] = vec3[4](vec3(0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f));	//其实是来的radiance / pdf，但是其能量是垂直的
vec3 sHitPos[4] = vec3[4](vec3(0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f));
vec3 sHitNormal[4] = vec3[4](vec3(0.0f, -1.0f, 0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f));
int sHitMesh[4] = int[4](0, 0, 0, 0);
vec3 sEmission[4] = vec3[4](vec3(0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f));
int makeSubLightPath(inout uint randomNumberSeed){

	vec3 lastHitPos;
	vec3 radiance = vec3(0.0f);
	Material lastMaterial;
	Material material;
	mat3 TBN = mat3(1.0f);
	vec3 hitPos = vec3(1.0f);
	vec3 fr = vec3(1.0f);
	float normalSign = 1.0f;	//-1说明是内到内，我们不需要剔除背面，而1表示外到内或内到外，需要剔除背面
	float pdf = 1.0f;

	int lossNum = 0;
	int lossNumMax = 30;

	sMISWeight[0] = 1 / lightA;
	Ray ray = makeStartRayFromLight(randomNumberSeed, pdf);

	sRadiance[0] = lightStrength / lightA;
	sHitPos[0] = ray.startPos;

	ivec2 result = hitScene(ray, normalSign);
	while(lossNum < lossNumMax && result.x == -1){
		randomNumberSeed = randomNumberSeed + lossNum;
		ray = makeStartRayFromLight(randomNumberSeed, pdf);

		lossNum++;
		result = hitScene(ray, normalSign);
	}
	if(lossNum - 1 == lossNumMax){
		return 1;
	}
	sMISWeight[1] = sMISWeight[0] * pdf;

	int meshIndex = result.x;
	int vertexIndex = result.y;
	hitPos = ray.startPos + ray.depth * ray.direction;
	sHitPos[1] = hitPos;
	sHitMesh[1] = meshIndex;

	vec3 normal;
	getHitPointNormalAndTBN(vertexIndex, normal, ray.direction, TBN);	//计算面法线
	sHitNormal[1] = normal;

	material = meshs[meshIndex].material;
	sEmission[1] = material.ke.rgb;


	float distance = length(ray.startPos - hitPos);
	sRadiance[1] = ray.radiance * max(dot(ray.normal, ray.direction), 0.0f) * max(dot(normal, -ray.direction), 0.0f) / (distance * distance) / pdf;

	float randomNumber = rand(randomNumberSeed);
	randomNumber = smoothstep(0.0f, 1.0f, randomNumber);
	vec4 directionAndPdf = getRayReflectDirection(material, TBN, -ray.direction, normal, randomNumber);
	pdf = directionAndPdf.w;

	lastHitPos = ray.startPos;
	ray.direction = normalize(directionAndPdf.xyz);
	ray.startPos = hitPos + 0.01f * ray.direction;
	ray.normal = normal;
	ray.radiance = sRadiance[1];
	ray.depth = 100.0f;

	for(int i = 2; i < s; i++){

		lossNum = 0;
		ivec2 result = hitScene(ray, normalSign);
		while(lossNum <= lossNumMax && result.x == -1){

			randomNumberSeed += lossNum;
			float randomNumber = 0.8f * (float(lossNum) / float(lossNumMax)) + 0.2f * rand(randomNumberSeed);
			directionAndPdf = getRayReflectDirection(material, TBN, normalize(lastHitPos - ray.startPos), normal, randomNumber);

			ray.startPos = ray.startPos - 0.01f * ray.direction + 0.01f * normalize(directionAndPdf.xyz);
			ray.direction = normalize(directionAndPdf.xyz);
			ray.depth = 100.0f;

			lossNum++;
			result = hitScene(ray, normalSign);

		}
		if(lossNum - 1 == lossNumMax){
			return i;
		}
		pdf = directionAndPdf.w;
		sMISWeight[i] = pdf * sMISWeight[i - 1];

		int meshIndex = result.x;
		int vertexIndex = result.y;
		hitPos = ray.startPos + ray.depth * ray.direction;
		sHitPos[i] = hitPos;
		sHitMesh[i] = meshIndex;

		getHitPointNormalAndTBN(vertexIndex, normal, ray.direction, TBN);		//计算面法线
		sHitNormal[i] = normal;

		lastMaterial = material;
		material = meshs[meshIndex].material;
		sEmission[i] = material.ke.rgb;

		//getFr是按之前pathTracing的getWeight改的，而pathTracing是将hit为入射，lastHit为出射，所以这里要反一下
		fr = getFr(hitPos, ray.startPos, ray.normal, lastHitPos, lastMaterial);
		sRadiance[i] = (fr * ray.radiance + sEmission[i - 1] * max(dot(ray.normal, ray.direction), 0.0f)) * max(dot(normal, -ray.direction), 0.0f) / pdf;

		float randomNumber = rand(randomNumberSeed);
		randomNumber = smoothstep(0.0f, 1.0f, randomNumber);
		directionAndPdf = getRayReflectDirection(material, TBN, -ray.direction, normal, randomNumber);
		pdf = directionAndPdf.w;

		lastHitPos = ray.startPos;
		ray.direction = normalize(directionAndPdf.xyz);
		ray.startPos = hitPos + 0.01f * ray.direction;
		ray.normal = normal;
		ray.radiance = sRadiance[i];
		ray.depth = 100.0f;

	}

	return s;

}

int t = 4;
float tMISWeight[4] = float[4](1.0f, 1.0f, 1.0f, 1.0f);
//相机子路径不需要记录radiance，因为没有，但是需要记录前面的顶点的fr*g / pdf的累乘
//索引0和1都是1.0f，因为0没有，而1的就是0的
vec3 tFrGWeight[4] = vec3[4](vec3(1.0f), vec3(1.0f), vec3(1.0f), vec3(1.0f));
vec3 tRadiance[4] = vec3[4](vec3(0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f));
vec3 tHitPos[4] = vec3[4](vec3(0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f));
vec3 tHitNormal[4] = vec3[4](vec3(0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f));
int tHitMesh[4] = int[4](0, 0, 0, 0);
vec3 tEmission[4] = vec3[4](vec3(0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f));
int makeSubCameraPath(Ray ray, inout uint randomNumberSeed){

	vec3 radiance = vec3(0.0f);
	Material lastMaterial;
	Material material;
	mat3 TBN = mat3(1.0f);
	vec3 hitPos = vec3(1.0f);
	vec3 lastHitPos = vec3(1.0f);
	vec3 weight = vec3(1.0f);
	float pdf = 1.0f;
	float normalSign = 1.0f;	//-1说明是内到内，我们不需要剔除背面，而1表示外到内或内到外，需要剔除背面

	int lossNum = 0;
	int lossNumMax = 30;

	tHitPos[0] = ray.startPos;

	ivec2 result = hitScene(ray, normalSign);
	if(result.x == -1){
		return 1;
	}

	int meshIndex = result.x;
	int vertexIndex = result.y;
	hitPos = ray.startPos + ray.depth * ray.direction;
	tHitPos[1] = hitPos;
	tHitMesh[1] = meshIndex;

	vec3 normal;
	getHitPointNormalAndTBN(vertexIndex, normal, ray.direction, TBN);	//计算面法线
	tHitNormal[1] = normal;

	material = meshs[meshIndex].material;
	tEmission[1] = material.ke.rgb;

	float randomNumber = rand(randomNumberSeed);
	randomNumber = smoothstep(0.0f, 1.0f, randomNumber);
	vec4 directionAndPdf = getRayReflectDirection(material, TBN, -ray.direction, normal, randomNumber);
	pdf = directionAndPdf.w;

	tRadiance[1] = tEmission[1] * max(dot(normal, -ray.direction), 0.0f);

	lastHitPos = ray.startPos;
	ray.direction = normalize(directionAndPdf.xyz);
	ray.startPos = hitPos + 0.01f * ray.direction;
	ray.normal = normal;
	ray.depth = 100.0f;

	for(int i = 2; i < s; i++){
	
		lossNum = 0;
		ivec2 result = hitScene(ray, normalSign);
		while(lossNum <= lossNumMax && result.x == -1){

			randomNumberSeed += lossNum;
			float randomNumber = 0.8f * (float(lossNum) / float(lossNumMax)) + 0.2f * rand(randomNumberSeed);
			directionAndPdf = getRayReflectDirection(material, TBN, normalize(lastHitPos - ray.startPos), normal, randomNumber);	//每次rand后都会修改randomNumberSeed

			ray.startPos = ray.startPos - 0.01f * ray.direction + 0.01f * directionAndPdf.xyz;
			ray.direction = directionAndPdf.xyz;
			ray.depth = 100.0f;

			lossNum++;
			result = hitScene(ray, normalSign);

		}
		if(lossNum - 1 == lossNumMax){
			return i;
		}
		pdf = directionAndPdf.w;
		tMISWeight[i] = pdf * sMISWeight[i - 1];

		int meshIndex = result.x;
		int vertexIndex = result.y;
		hitPos = ray.startPos + ray.depth * ray.direction;
		tHitPos[i] = hitPos;
		tHitMesh[i] = meshIndex;

		getHitPointNormalAndTBN(vertexIndex, normal, ray.direction, TBN);		//计算面法线
		tHitNormal[i] = normal;

		lastMaterial = material;
		material = meshs[meshIndex].material;
		tEmission[i] = material.ke.rgb;

		tFrGWeight[i] = tFrGWeight[i - 1] * getFr(lastHitPos, ray.startPos, ray.normal, hitPos, lastMaterial) * max(dot(ray.normal, normalize(hitPos - ray.startPos)), 0.0f) / pdf;
		
		float randomNumber = rand(randomNumberSeed);
		randomNumber = smoothstep(0.0f, 1.0f, randomNumber);
		directionAndPdf = getRayReflectDirection(material, TBN, -ray.direction, normal, randomNumber);
		pdf = directionAndPdf.w;

		tRadiance[i] = tEmission[i] * max(dot(normal, -ray.direction), 0.0f) * tFrGWeight[i - 1] + tRadiance[i - 1];

		lastHitPos = ray.startPos;
		ray.direction = normalize(directionAndPdf.xyz);
		ray.startPos = hitPos + 0.01f * ray.direction;
		ray.normal = normal;
		ray.depth = 100.0f;
		
	}

	return t;

}

void main(){

	vec3 radiance = vec3(0.0f);
	int sppNum = 20;
	vec2 texelSize = 1.0f / (gl_WorkGroupSize * gl_NumWorkGroups).xy;
	//uint randomNumber = uint(cubo.randomNumber.w + gl_GlobalInvocationID + cubo.randomNumber.x) % 1000;

	//不是，这个灯泡这么小？太亮了
	lightA = 1;		//lubo.size.x * lubo.size.z;

	for(int spp = 0; spp < sppNum; spp++){
	
		uvec2 seed2 = pcg2d(ivec2(gl_GlobalInvocationID) * (uint(cubo.randomNumber.w) + spp * 10 + sppNum * ivec2(cubo.randomNumber.x, cubo.randomNumber.y + cubo.randomNumber.z) + 1));
		uint seed = seed2.x + seed2.y;
		vec2 texelUV = (vec2(gl_GlobalInvocationID.xy) + vec2(rand(seed), rand(seed))) * texelSize;

		Ray ray = makeStartRayFromCamera(texelUV);
		s = makeSubLightPath(seed);
		t = makeSubCameraPath(ray, seed);

		float MISWeight[6] = float[6](0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f);

		for(int i = 0; i < s; i++){
			for(int j = 1; j < t; j++){

				//判断连接是否会被遮挡

				if(dot(sHitNormal[i], tHitPos[j] - sHitPos[i]) <= 0.0f){
					continue;
				}

				if(dot(sHitPos[i] - tHitPos[j], tHitNormal[j]) <= 0.0f){
					continue;
				}

				Ray ray;
				ray.direction = normalize(tHitPos[j] - sHitPos[i]);
				ray.startPos = sHitPos[i];
				ray.depth = 100.0f;
				hitScene(ray, 1.0f);
				if(abs(ray.depth - length(sHitPos[i] - tHitPos[j])) > 0.01f){
					continue;	//有遮挡，则不计入
				}

				MISWeight[i + j - 1] += sMISWeight[i] * tMISWeight[j];

			}
		}

		for(int j = 1; j < t; j++){

			if(dot(sHitNormal[0], tHitPos[j] - sHitPos[0]) <= 0.0f){
				continue;
			}

			if(dot(sHitPos[0] - tHitPos[j], tHitNormal[j]) <= 0.0f){
				continue;
			}
			
			Ray ray;
			ray.direction = normalize(tHitPos[j] - sHitPos[0]);
			ray.startPos = sHitPos[0];
			ray.depth = 100.0f;
			hitScene(ray, 1.0f);
			if(abs(ray.depth - length(sHitPos[0] - tHitPos[j])) > 0.01f){
				continue;
			}
			
			float distance = length(tHitPos[j] - sHitPos[0]);
			vec3 frCamera = getFr(tHitPos[j - 1], tHitPos[j], tHitNormal[j], sHitPos[0], meshs[tHitMesh[j]].material);
			
			vec3 noWeightRadiance = tRadiance[j] + 
									frCamera * sRadiance[0] / (distance * distance) * 
									max(dot(sHitPos[0] - tHitPos[j], tHitNormal[j]), 0.0f) * tFrGWeight[j];
			
			float weight = min((sMISWeight[0] * tMISWeight[j]) / max(MISWeight[j - 1], 0.01f), 1.0f);
			radiance += noWeightRadiance * weight;

		}


		for(int i = 1; i < s; i++){
			for(int j = 1; j < t; j++){

				float cosThetaLight = dot(sHitNormal[i], normalize(tHitPos[j] - sHitPos[i]));
				if(cosThetaLight <= 0.0f){
					continue;
				}

				float cosThetaCamera = dot(normalize(sHitPos[i] - tHitPos[j]), tHitNormal[j]);
				if(cosThetaCamera <= 0.0f){
					continue;
				}

				//判断连接是否会被遮挡，之前判断过，现在还要判断第二次
				Ray ray;
				ray.direction = normalize(tHitPos[j] - sHitPos[i]);
				ray.startPos = sHitPos[i];
				ray.depth = 100.0f;
				hitScene(ray, 1.0f);
				if(abs(ray.depth - length(sHitPos[i] - tHitPos[j])) > 0.01f){
					continue;
				}

				vec3 frLight = getFr(tHitPos[j], sHitPos[i], sHitNormal[i], sHitPos[i - 1], meshs[sHitMesh[i]].material);
				vec3 frCamera = getFr(tHitPos[j - 1], tHitPos[j], tHitNormal[j], sHitPos[i], meshs[tHitMesh[j]].material);

				vec3 noWeightRadiance = tRadiance[j] + (sEmission[i] * cosThetaLight + frLight * frCamera * sRadiance[i]) * cosThetaCamera * tFrGWeight[j];
				float weight = min((sMISWeight[i] * tMISWeight[j]) / max(MISWeight[i + j - 1], 0.01f), 1.0f);
				radiance += noWeightRadiance * weight;

			}
		}
	
	}

	radiance /= float(sppNum);
	radiance /= 6;

	//radiance = s < 4 ? vec3(1.0f) : vec3(0.0f);
	imageStore(pathTracingResult, ivec2(gl_GlobalInvocationID.xy), vec4(radiance, 1.0f));

}


